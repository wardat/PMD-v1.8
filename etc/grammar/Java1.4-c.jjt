/**
 *
 * Added in support for assert as a name using lookaheads
 *
 * Tom Copeland, 09/03
 * ===================================================================
 * Copied over the changes made by Andrea Gini and Marco Savard to
 * support JDK 1.4 language constructs, i.e., asserts.
 * See the java1_4c.jj distributed in the javacc2.1/examples/JavaGrammers directory.
 * Made numerous other modifications to support PMD.
 *
 * Tom Copeland, 6/02
 * ===================================================================
 * This file is a modified version of one originally found in the
 * VTransformer Examples directory of JavaCC1_1. It has been
 * modified to accept Java source code for Java 1.2. Basically,
 * this means a new key word was added, 'strictfp', and that keyword
 * added to the appropriate productions and LOOKAHEADs (where other,
 * similar keywords are listed as possible choices). This involved
 * changing 11 lines.
 *
 * Some other minor changes were made, which can be found by doing
 * a search on 'DW, 7/99'.
 *
 * The goal of this effort was for the grammar to be able to parse
 * any legal Java 1.2 source code. It does not reject all illegal
 * cases, but neither did the original. Plus, when it comes to
 * the new 'strictfp' keyword, the Java Compiler from Sun (JDK1.2.1)
 * also does not reject all illegal cases, as defined by the
 * "Updates" document found at
 *       http://java.sun.com/docs/books/jls/strictfp-changes.pdf
 * (see the testcases.txt file for details).
 *
 * David Williams, 7/99
 * ===================================================================
 *
 *
 * Copyright (C) 1996, 1997 Sun Microsystems Inc.
 *
 * Use of this file and the system it is part of is constrained by the
 * file COPYRIGHT in the root directory of this system.  You may, however,
 * make any modifications you wish to this file.
 *
 * Java files generated by running JavaCC on this file (or modified versions
 * of this file) may be used in exactly the same manner as Java files
 * generated from any grammar developed by you.
 *
 * Author: Sriram Sankar
 * Date: 3/5/97
 *
 * This file contains a Java grammar and actions that implement a front-end.
 */

options {
  JAVA_UNICODE_ESCAPE = true;
  USER_CHAR_STREAM = true;
  STATIC=false;
  MULTI=true;
  VISITOR=true;
  NODE_USES_PARSER=true;
  NODE_PACKAGE="net.sourceforge.pmd.ast";
}

PARSER_BEGIN(JavaParser)
package net.sourceforge.pmd.ast;
public class JavaParser {

  private boolean usingAssertAsIdentifier;
  private boolean isJDK15;

  public void setAssertAsIdentifier() {
   this.usingAssertAsIdentifier = true;
  }

  public void setJDK15() {
   this.isJDK15 = true;
  }

  private void checkForBadAssertUsage(String in, String usage) {
    if (!usingAssertAsIdentifier && in.equals("assert")) {
      throw new ParseException("Can't use 'assert' as " + usage + " when running in JDK 1.4 mode!");
    }
  }

  private void checkForBadEnumUsage(String in, String usage) {
    if (isJDK15 && in.equals("enum")) {
      throw new ParseException("Can't use 'enum' as " + usage + " when running in JDK 1.5 mode!");
    }
  }

  // This is a semantic LOOKAHEAD to determine if we're dealing with an assert
  // Note that this can't be replaced with a syntactic lookahead
  // since "assert" isn't a string literal token
  private boolean isNextTokenAnAssert() {
    return getToken(1).image.equals("assert");
  }

  private boolean enumLookahead() {
    int x = 1;
    Token tok = null;
    while (true) {
      tok = getToken(x);
      if (tok.image.equals("static") ||
          tok.image.equals("final") ||
          tok.image.equals("public") ||
          tok.image.equals("protected") ||
          tok.image.equals("private") ) {
        x++;
      } else {
        break;
      }
    }
    return tok.image.equals("enum");
  }

  private void checkForDiscard(SimpleNode node) {
    if (node.getImage() == null) {
        node.setDiscardable();
    }
  }

  private void discardNodes(ASTCompilationUnit node) {
      DiscardableNodeCleaner c = new DiscardableNodeCleaner();
      c.clean(node);
  }

}
PARSER_END(JavaParser)

/* WHITE SPACE */

SPECIAL_TOKEN :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SPECIAL_TOKEN :
{
< SINGLE_LINE_COMMENT: "//"(~["\n","\r"])* ("\n"|"\r"|"\r\n")? >
}

/* COMMENTS */

MORE :
{
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{
  < ABSTRACT: "abstract" >
| < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CHAR: "char" >
| < CLASS: "class" >
| < CONST: "const" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < FINAL: "final" >
| < FINALLY: "finally" >
| < FLOAT: "float" >
| < FOR: "for" >
| < GOTO: "goto" >
| < IF: "if" >
| < IMPLEMENTS: "implements" >
| < IMPORT: "import" >
| < INSTANCEOF: "instanceof" >
| < INT: "int" >
| < INTERFACE: "interface" >
| < LONG: "long" >
| < NATIVE: "native" >
| < NEW: "new" >
| < NULL: "null" >
| < PACKAGE: "package">
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < SHORT: "short" >
| < STATIC: "static" >
| < SUPER: "super" >
| < SWITCH: "switch" >
| < SYNCHRONIZED: "synchronized" >
| < THIS: "this" >
| < THROW: "throw" >
| < THROWS: "throws" >
| < TRANSIENT: "transient" >
| < TRUE: "true" >
| < TRY: "try" >
| < VOID: "void" >
| < VOLATILE: "volatile" >
| < WHILE: "while" >
| < STRICTFP: "strictfp" >
}

/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < RSIGNEDSHIFT: ">>" >
| < RUNSIGNEDSHIFT: ">>>" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
}


/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */

ASTCompilationUnit CompilationUnit() :
{}
{
  [ PackageDeclaration() ]
  ( ImportDeclaration() )*
  ( TypeDeclaration() )*
  ( < "\u001a" > )?
  ( < "~[]" > )?
  <EOF>
        {
          discardNodes(jjtThis);
		  return jjtThis;
		}
}

void PackageDeclaration() :
{}
{
  "package" Name() ";"
}

void ImportDeclaration() :
{}
{
  "import" Name() [ "." "*" {jjtThis.setImportOnDemand();} ] ";"
}

void TypeDeclaration() :
{}
{
  LOOKAHEAD( ( "abstract" | "final" | "public" | "strictfp" )* "class" )
  ClassDeclaration()
|
  LOOKAHEAD( { enumLookahead() } )
  EnumDeclaration()
|
  InterfaceDeclaration()
|
  ";"
}


/*
 * Declaration syntax follows.
 */

void ClassDeclaration() :
{}
{
  ( "abstract"  { jjtThis.setAbstract(); }
  | "final"     { jjtThis.setFinal(); }
  | "public"    { jjtThis.setPublic(); }
  | "strictfp"  { jjtThis.setStrict(); }
  )*
  UnmodifiedClassDeclaration()
}

void UnmodifiedClassDeclaration() :
{ Token t = null; }
{
  "class" t=<IDENTIFIER>
  { jjtThis.setImage( t.image ); }
  [ "extends" { jjtThis.setHasExplicitExtends(); } Name() ]
  [ "implements" { jjtThis.setHasExplicitImplements(); } NameList() ]
  ClassBody()
}

void ClassBody() :
{}
{
  "{" ( ClassBodyDeclaration() )* "}"
}

void NestedClassDeclaration() :
{}
{
  ( "static"       { jjtThis.setStatic(); }
  | "abstract"    { jjtThis.setAbstract(); }
  | "final"       { jjtThis.setFinal(); }
  | "public"      { jjtThis.setPublic(); }
  | "protected"   { jjtThis.setProtected(); }
  | "private"     { jjtThis.setPrivate(); }
  | "strictfp"    { jjtThis.setStrict(); }
  )*
  UnmodifiedClassDeclaration()
}

void ClassBodyDeclaration() :
{}
{
  LOOKAHEAD(2)
  Initializer()
|
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" | "strictfp")* "class" )
  NestedClassDeclaration()
|
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" | "strictfp")* "interface" )
  NestedInterfaceDeclaration()
|
  LOOKAHEAD( [ "public" | "protected" | "private" ] Name() "(" )
  ConstructorDeclaration()
|
  LOOKAHEAD( MethodDeclarationLookahead() )
  MethodDeclaration()
|
  LOOKAHEAD( { enumLookahead() } )
  EnumDeclaration()
|
  FieldDeclaration()
|
  ";"
}

void EnumDeclaration() :
{Token t = null;}
{
  ( "public"            { jjtThis.setPublic(); }
  | "protected"         { jjtThis.setProtected(); }
  | "private"           { jjtThis.setPrivate(); }
  | "static"            { jjtThis.setStatic(); }
  | "final"             { jjtThis.setFinal(); }
  )*
  t = <IDENTIFIER> {
    if (!t.image.equals("enum")) {
      throw new ParseException("ERROR: expecting enum");
    }
    if (!this.isJDK15) {
      throw new ParseException("ERROR: Can't use enum as a keyword in pre-JDK 1.5 target");
    }
  }
  <IDENTIFIER>
  "{"
  [ "implements" NameList() ]
  EnumElement()
  (
   "," EnumElement()
  )*
  "}"
  ";"
}

void EnumElement() :
{Token t = null;}
{
    t = <IDENTIFIER> {jjtThis.setImage(t.image);}
    [ Arguments() ][ ClassBody() ]
}

// This production is to determine lookahead only.
void MethodDeclarationLookahead() :
{}
{
  ( "public" | "protected" | "private" | "static" | "abstract" | "final" | "native" | "synchronized" | "strictfp")*
  ResultType() <IDENTIFIER> "("
}

void InterfaceDeclaration() :
{}
{
  ( "abstract"  { jjtThis.setAbstract(); }
  | "public"    { jjtThis.setPublic(); }
  | "strictfp"  { jjtThis.setStrict(); }
  )*
  UnmodifiedInterfaceDeclaration()
}

void NestedInterfaceDeclaration() :
{}
{
  ( "static"       { jjtThis.setStatic(); }
  | "abstract"    { jjtThis.setAbstract(); }
  | "final"       { jjtThis.setFinal(); }
  | "public"      { jjtThis.setPublic(); }
  | "protected"   { jjtThis.setProtected(); }
  | "private"     { jjtThis.setPrivate(); }
  | "strictfp"    { jjtThis.setStrict(); }
  )*
  UnmodifiedInterfaceDeclaration()
}

void UnmodifiedInterfaceDeclaration() :
{Token t = null; }
{
  "interface" t=<IDENTIFIER>
  {
     jjtThis.setImage( t.image );
  }
  [ "extends" NameList() ]
  "{" ( InterfaceMemberDeclaration() )* "}"
}

void InterfaceMemberDeclaration() :
{}
{
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" | "strictfp")* "class" )
  NestedClassDeclaration()
|
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" | "strictfp")* "interface" )
  NestedInterfaceDeclaration()
|
  LOOKAHEAD( MethodDeclarationLookahead() )
  MethodDeclaration()
|
  FieldDeclaration()
|
  ";"
}

void FieldDeclaration() :
{
}
{
  ( "public"            { jjtThis.setPublic(); }
  | "protected"         { jjtThis.setProtected(); }
  | "private"           { jjtThis.setPrivate(); }
  | "static"            { jjtThis.setStatic(); }
  | "final"             { jjtThis.setFinal(); }
  | "transient"         { jjtThis.setTransient(); }
  | "volatile"          { jjtThis.setVolatile(); } )*

  Type() VariableDeclarator() ( "," VariableDeclarator() )* ";"
}

void VariableDeclarator() :
{}
{
  VariableDeclaratorId() [ "=" VariableInitializer() ]
}

void VariableDeclaratorId() :
{
  String s = null;
  Token t = null;
}
{
  t=<IDENTIFIER>
  {
    s = t.image;
  }
  ( "[" "]" )*
  {
    checkForBadAssertUsage(t.image, "a variable name");
    checkForBadEnumUsage(t.image, "a variable name");
    jjtThis.setImage( s );
  }
}

void VariableInitializer() :
{}
{
  ArrayInitializer()
| Expression()
}

void ArrayInitializer() :
{}
{
  "{" [ VariableInitializer() ( LOOKAHEAD(2) "," VariableInitializer() )* ] [ "," ] "}"
}

void MethodDeclaration() :
{}
{
  ( "public"            { jjtThis.setPublic(); }
  | "protected"         { jjtThis.setProtected(); }
  | "private"           { jjtThis.setPrivate(); }
  | "static"            { jjtThis.setStatic(); }
  | "abstract"          { jjtThis.setAbstract(); }
  | "final"             { jjtThis.setFinal(); }
  | "native"            { jjtThis.setNative(); }
  | "synchronized"      { jjtThis.setSynchronized(); }
  | "strictfp"          { jjtThis.setStrict(); }
  )*
  ResultType() MethodDeclarator() [ "throws" NameList() ]
  ( Block() | ";" )
}

void MethodDeclarator() :
{
  Token t = null;
}
{
  t=<IDENTIFIER>
  {
    checkForBadAssertUsage(t.image, "a method name");
    checkForBadEnumUsage(t.image, "a method name");
    jjtThis.setImage( t.image );
  }
  FormalParameters() ( "[" "]" )*
}


void FormalParameters() :
{}
{
  "(" [ FormalParameter() ( "," FormalParameter() )* ] ")"
}

void FormalParameter() :
{}
{
  [ "final" {jjtThis.setFinal();} ] Type() VariableDeclaratorId()
}

void ConstructorDeclaration() :
{}
{
  [
  "public" { jjtThis.setPublic(); }
  | "protected" { jjtThis.setProtected(); }
  | "private"  { jjtThis.setPrivate(); }
  ]
  <IDENTIFIER> FormalParameters() [ "throws" NameList() ]
  "{"
    [ LOOKAHEAD(ExplicitConstructorInvocation()) ExplicitConstructorInvocation() ]
    ( BlockStatement() )*
  "}"
}

void ExplicitConstructorInvocation() :
{}
{
  LOOKAHEAD("this"  Arguments() ";") "this" {((ASTExplicitConstructorInvocation)jjtThis).setIsThis();} Arguments() ";"
|
  [ LOOKAHEAD(2) PrimaryExpression() "." ] "super"  {((ASTExplicitConstructorInvocation)jjtThis).setIsSuper();} Arguments() ";"
}

void Initializer() :
{}
{
  [ "static" {jjtThis.setStatic();} ] Block()
}


/*
 * Type, name and expression syntax follows.
 */

void Type() :
{}
{
  ( PrimitiveType() | Name() ) ( "[" "]"
  {
    jjtThis.addDimension();
    jjtThis.setIsArray();
  } )*
}


void PrimitiveType() :
{}
{
  "boolean" {jjtThis.setImage("boolean");}
| "char" {jjtThis.setImage("char");}
| "byte" {jjtThis.setImage("byte");}
| "short" {jjtThis.setImage("short");}
| "int" {jjtThis.setImage("int");}
| "long" {jjtThis.setImage("long");}
| "float" {jjtThis.setImage("float");}
| "double" {jjtThis.setImage("double");}
}


void ResultType() :
{}
{
  "void"
| Type()
}

void Name() :
/*
 * A lookahead of 2 is required below since "Name" can be followed
 * by a ".*" when used in the context of an "ImportDeclaration".
 */
{
  StringBuffer s = new StringBuffer();
  Token t = null;
}
{
  t=<IDENTIFIER>
  {
    jjtThis.testingOnly__setBeginLine( t.beginLine);
    jjtThis.testingOnly__setBeginColumn( t.beginColumn);
    s.append(t.image);
  }
  ( LOOKAHEAD(2) "." t=<IDENTIFIER>
    {
        s.append(".");
        s.append(t.image);
    }
  )*
  {
    jjtThis.setImage( s.toString() );
  }
}

void NameList() :
{}
{
  Name()
  ( "," Name()
  )*
}


/*
 * Expression syntax follows.
 */

void Expression() :
/*
 * This expansion has been written this way instead of:
 *   Assignment() | ConditionalExpression()
 * for performance reasons.
 * However, it is a weakening of the grammar for it allows the LHS of
 * assignments to be any conditional expression whereas it can only be
 * a primary expression.  Consider adding a semantic predicate to work
 * around this.
 */
{}
{
  ConditionalExpression()
  [
    AssignmentOperator() Expression()
  ]
}

void AssignmentOperator() :
{}
{
      "="     {jjtThis.setImage("=");}
    | "*="    {jjtThis.setImage("*=");}
    | "/="    {jjtThis.setImage("/=");}
    | "%="    {jjtThis.setImage("%=");}
    | "+="    {jjtThis.setImage("+=");}
    | "-="    {jjtThis.setImage("-=");}
    | "<<="   {jjtThis.setImage("<<=");}
    | ">>="   {jjtThis.setImage(">>=");}
    | ">>>="  {jjtThis.setImage(">>>=");}
    | "&="    {jjtThis.setImage("&=");}
    | "^="    {jjtThis.setImage("^=");}
    | "|="    {jjtThis.setImage("|=");}
}

void ConditionalExpression() :
{}
{
  ConditionalOrExpression() {checkForDiscard(jjtThis);} [ "?" {jjtThis.setUnDiscardable();} Expression() ":" ConditionalExpression() ]
}

void ConditionalOrExpression() :
{}
{
  ConditionalAndExpression() {checkForDiscard(jjtThis);} ( "||" {jjtThis.setUnDiscardable();} ConditionalAndExpression() )*
}

void ConditionalAndExpression() :
{}
{
  InclusiveOrExpression() {checkForDiscard(jjtThis);}  ( "&&" {jjtThis.setUnDiscardable();} InclusiveOrExpression() )*
}

void InclusiveOrExpression() :
{}
{
  ExclusiveOrExpression() {checkForDiscard(jjtThis);} ( "|" {jjtThis.setUnDiscardable();} ExclusiveOrExpression() )*
}

void ExclusiveOrExpression() :
{}
{
  AndExpression() {checkForDiscard(jjtThis);} ( "^" {jjtThis.setUnDiscardable();} AndExpression() )*
}

void AndExpression() :
{}
{
  EqualityExpression() {checkForDiscard(jjtThis);} ( "&" {jjtThis.setUnDiscardable();} EqualityExpression() )*
}

void EqualityExpression() :
{}
{
  InstanceOfExpression() {checkForDiscard(jjtThis);} ( ( "==" {jjtThis.setImage("==");jjtThis.setUnDiscardable(); } | "!=" {jjtThis.setImage("!=");jjtThis.setUnDiscardable();} ) InstanceOfExpression()  )*
}

void InstanceOfExpression() :
{}
{
  RelationalExpression() {checkForDiscard(jjtThis);} [ "instanceof" {jjtThis.setUnDiscardable();} Type() ]
}

void RelationalExpression() :
{}
{
  ShiftExpression() {checkForDiscard(jjtThis);} ( ( "<" {jjtThis.setImage("<");jjtThis.setUnDiscardable();} | ">" {jjtThis.setImage(">");jjtThis.setUnDiscardable();} | "<=" {jjtThis.setImage("<=");jjtThis.setUnDiscardable();} | ">=" {jjtThis.setImage(">=");jjtThis.setUnDiscardable();} ) ShiftExpression() )*
}

void ShiftExpression() :
{}
{
  AdditiveExpression() {checkForDiscard(jjtThis);} ( ( "<<" {jjtThis.setImage("<<");jjtThis.setUnDiscardable();} | ">>" {jjtThis.setImage(">>");jjtThis.setUnDiscardable();} | ">>>" {jjtThis.setImage(">>>");jjtThis.setUnDiscardable();} ) AdditiveExpression() )*
}

void AdditiveExpression() :
{}
{
  MultiplicativeExpression() {checkForDiscard(jjtThis);} ( ( "+" {jjtThis.setImage("+");jjtThis.setUnDiscardable();} | "-" {jjtThis.setImage("-");jjtThis.setUnDiscardable();} ) MultiplicativeExpression() )*
}

void MultiplicativeExpression() :
{}
{
  UnaryExpression() {checkForDiscard(jjtThis);} ( ( "*" {jjtThis.setImage("*");jjtThis.setUnDiscardable();} | "/" {jjtThis.setImage("/");jjtThis.setUnDiscardable();} | "%" {jjtThis.setImage("%");jjtThis.setUnDiscardable();}) UnaryExpression() )*
}

void UnaryExpression() :
{}
{
  ( "+" {jjtThis.setImage("+");jjtThis.setUnDiscardable();} | "-" {jjtThis.setImage("-");jjtThis.setUnDiscardable();} ) UnaryExpression() | PreIncrementExpression() | PreDecrementExpression() | UnaryExpressionNotPlusMinus()
}

void PreIncrementExpression() :
{}
{
  "++" PrimaryExpression()
}

void PreDecrementExpression() :
{}
{
  "--" PrimaryExpression()
}

// TODO - something's wrong here; PostfixExpression nodes are not appearing
void UnaryExpressionNotPlusMinus() :
{}
{
 {checkForDiscard(jjtThis);}
 ( "~" {jjtThis.setImage("~");} | "!" {jjtThis.setImage("!");} ) UnaryExpression()
| LOOKAHEAD( CastLookahead() ) CastExpression()
| PostfixExpression()
}

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
void CastLookahead() :
{}
{ LOOKAHEAD(2) "(" PrimitiveType()
| LOOKAHEAD("(" Name() "[")
  "(" Name() "[" "]"
| "(" Name() ")" ( "~" | "!" | "(" | <IDENTIFIER> | "this" | "super" | "new" | Literal() )
}

void PostfixExpression() :
{}
{
  PrimaryExpression() [ "++" {jjtThis.setImage("++");jjtThis.setUnDiscardable();} | "--" {jjtThis.setImage("--");jjtThis.setUnDiscardable();} ]
}

void CastExpression() :
{}
{ LOOKAHEAD("(" PrimitiveType()) "(" Type() ")" UnaryExpression()
| "(" Type() ")" UnaryExpressionNotPlusMinus()
}

void PrimaryExpression() :
{}
{
  PrimaryPrefix() ( LOOKAHEAD(2) PrimarySuffix() )*
}

void PrimaryPrefix() :
{
  Token t = null;
}
{
  Literal()
| "this" {jjtThis.setUsesThisModifier();}
| "super"  {jjtThis.setUsesSuperModifier();} "." t=<IDENTIFIER> {jjtThis.setImage(t.image);}
| "(" Expression() ")"
| AllocationExpression()
| LOOKAHEAD( ResultType() "." "class" ) ResultType() "." "class"
| Name()
}

void PrimarySuffix() :
{
  String s = null;
  Token t = null;
}
{ LOOKAHEAD(2) "." "this"
| LOOKAHEAD(2) "." "super"
| LOOKAHEAD(2) "." AllocationExpression()
| "[" Expression() "]"
| "." t=<IDENTIFIER> {s = t.image;} {jjtThis.setImage(s);}
| Arguments() {jjtThis.setIsArguments();}
}

void Literal() :
{}
{
{ Token t = null;}
  t=<INTEGER_LITERAL> {jjtThis.setImage(t.image);}
| t=<FLOATING_POINT_LITERAL> {jjtThis.setImage(t.image);}
| t=<CHARACTER_LITERAL> {jjtThis.setImage(t.image);}
| t=<STRING_LITERAL> {jjtThis.setImage(t.image);}
| BooleanLiteral()
| NullLiteral()
}

void BooleanLiteral() :
{}
{
  "true" { jjtThis.setTrue(); }
| "false"
}

void NullLiteral() :
{}
{
  "null"
}

void Arguments() :
{}
{
  "(" [ ArgumentList() ] ")"
}

void ArgumentList() :
{}
{
  Expression() ( "," Expression() )*
}

void AllocationExpression() :
{}
{
  LOOKAHEAD(2)
  "new" PrimitiveType() ArrayDimsAndInits()
|
  "new" Name()
    (
      ArrayDimsAndInits()
    | Arguments() [ ClassBody() ]
    )
}

/*
 * The second LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
void ArrayDimsAndInits() :
{}
{
  LOOKAHEAD(2)
  ( LOOKAHEAD(2) "[" Expression() "]" )+ ( LOOKAHEAD(2) "[" "]" )*
|
  ( "[" "]" )+ ArrayInitializer()
}


/*
 * Statement syntax follows.
 */

void Statement() :
{}
{
  LOOKAHEAD( { isNextTokenAnAssert() } ) AssertStatement()
| LOOKAHEAD(2) LabeledStatement()
| Block()
| EmptyStatement()
| StatementExpression() ";"
| SwitchStatement()
| IfStatement()
| WhileStatement()
| DoStatement()
| ForStatement()
| BreakStatement()
| ContinueStatement()
| ReturnStatement()
| ThrowStatement()
| SynchronizedStatement()
| TryStatement()
}

void LabeledStatement() :
{}
{
  <IDENTIFIER> ":" Statement()
}

void Block() :
{}
{
  "{" ( BlockStatement() )* "}"
}

void BlockStatement() :
{}
{
  LOOKAHEAD( { isNextTokenAnAssert() } ) Statement()
| LOOKAHEAD([ "final" ] Type() <IDENTIFIER>) LocalVariableDeclaration() ";"
| "final" TypeDeclaration()
| Statement()
| UnmodifiedClassDeclaration()
| UnmodifiedInterfaceDeclaration()
}

void LocalVariableDeclaration() :
{}
{
  [ "final" {jjtThis.setFinal();} ] Type() VariableDeclarator() ( "," VariableDeclarator() )*
}

void EmptyStatement() :
{}
{
  ";"
}

void StatementExpression() :
/*
 * The last expansion of this production accepts more than the legal
 * Java expansions for StatementExpression.  This expansion does not
 * use PostfixExpression for performance reasons.
 */
{}
{
  PreIncrementExpression()
|
  PreDecrementExpression()
|
  PrimaryExpression()
  [ "++"
  | "--"
  | AssignmentOperator() Expression()
  ]
}

void SwitchStatement() :
{}
{
  "switch" "(" Expression() ")" "{"
    ( SwitchLabel() ( BlockStatement() )* )*
  "}"
}

void SwitchLabel() :
{}
{
  "case" Expression() ":"
|
  "default" ":"
}

void IfStatement() :
/*
 * The disambiguating algorithm of JavaCC automatically binds dangling
 * else's to the innermost if statement.  The LOOKAHEAD specification
 * is to tell JavaCC that we know what we are doing.
 */
{
boolean hasElse = false;
}
{
  "if" "(" Expression() ")" Statement() [ LOOKAHEAD(1) "else" {hasElse = true;} Statement() ]
{
    if (hasElse) {
        jjtThis.setHasElse();
    }
}
}

void WhileStatement() :
{}
{
  "while" "(" Expression() ")" Statement()
}

void DoStatement() :
{}
{
  "do" Statement() "while" "(" Expression() ")" ";"
}

void ForStatement() :
{}
{
  "for" "(" [ ForInit() ] ";" [ Expression() ] ";" [ ForUpdate() ] ")" Statement()
}

void ForInit() :
{}
{
  LOOKAHEAD( [ "final" ] Type() <IDENTIFIER> )
  LocalVariableDeclaration()
|
  StatementExpressionList()
}

void StatementExpressionList() :
{}
{
  StatementExpression() ( "," StatementExpression() )*
}

void ForUpdate() :
{}
{
  StatementExpressionList()
}

void BreakStatement() :
{}
{
  "break" [ <IDENTIFIER> ] ";"
}

void ContinueStatement() :
{}
{
  "continue" [ <IDENTIFIER> ] ";"
}

void ReturnStatement() :
{}
{
  "return" [ Expression() ] ";"
}

void ThrowStatement() :
{}
{
  "throw" Expression() ";"
}

void SynchronizedStatement() :
{}
{
  "synchronized" "(" Expression() ")" Block()
}

void TryStatement() :
/*
 * Semantic check required here to make sure that at least one
 * finally/catch is present.
 */
{}
{
  "try" Block()
  ( "catch" {jjtThis.setHasCatch();} "(" FormalParameter() ")" Block() )*
  [ "finally" {jjtThis.setHasFinally();} Block() ]
}

void AssertStatement() :
{
    if (usingAssertAsIdentifier) {
     throw new ParseException("Can't use 'assert' as a keyword when running in JDK 1.3 mode!");
    }
    Token tok;
}
{
  tok = <IDENTIFIER> {}
  Expression() [ ":" Expression() ] ";"
}
