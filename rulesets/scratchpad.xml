<?xml version="1.0"?>

<ruleset name="scratchpad">
  <description>
These are new rules that are still in progress
  </description>

    <rule name="IfElseStmtsMustUseBracesRule"
         message="Avoid using 'if...else' statements without curly braces"
         class="net.sourceforge.pmd.rules.XPathRule">
     <description>
     Avoid using if..else statements without using curly braces
     </description>
       <properties>
           <property name="xpath">
               <value>
  <![CDATA[
  //Statement
   [parent::IfStatement]
   [not(child::Block)]
   [not(child::IfStatement)]
  ]]>
               </value>
           </property>
       </properties>
       <priority>3</priority>

     <example>
 <![CDATA[

   public void doSomething() {
     // this is OK
     if (foo) x++;

     // but this is not
     if (foo)
         x=x+1;
     else
         x=x-1;
   }
 ]]>
     </example>
   </rule>


    <!--
<rule name="IdempotentOperationsRule"
      message="NOT FULLY IMPLEMENTED - Avoid idempotent operations"
      class="net.sourceforge.pmd.rules.IdempotentOperationsRule">
  <description>
  Avoid idempotent operations - they are silly.
  </description>
    <priority>3</priority>

  <example>
  <![CDATA[
public class Foo {
 public void bar() {
  int x = 2;
  x = x;
 }
}
  ]]>
  </example>
</rule>

<rule name="UnnecessaryParentheses"
      message="NOT FULLY IMPLEMENTED - Unnecessary parentheses are a bit noisy"
      class="net.sourceforge.pmd.rules.XPathRule">
  <description>
  Unnecessary parameters are a bit noisy
  </description>
    <properties>
        <property name="xpath">
            <value>
                <![CDATA[
//ReturnStatement
 [count(//Expression) >1]
 [count(//PrimarySuffix)<2]
                ]]>
            </value>
        </property>
    </properties>
    <priority>3</priority>

  <example>
  <![CDATA[
public class Foo {
 public int bar() {
  return (42);
 }
}
  ]]>
  </example>
</rule>   !-->

    <!--
     <rule name="PositionalIterator"
           message="Avoid positional iterators"
           class="net.sourceforge.pmd.rules.design.PositionalIteratorRule">
       <description>
       Avoid positional iterators.   This doesn't work yet,
       it breaks on stuff like this:
       public class Foo {
        private int baz = true;
        public void bar(Iterator i) {
         Object x = null;
         while (i.hasNext()) {
          if (baz) {
           x = i.next();
          } else {
           x = new Runnable() {public void run() {Object bif = i.next();}}
          }
         }
        }
       }
       See javax.security.auth.Subject.java, inner class SecureSet, method removeAll(), around line 1092 for a good example.
       </description>

       <example>
   <![CDATA[
   public class PositionalIterators {
    public void foo(Iterator i) {
     while(i.hasNext()) {
      Object one = i.next();
      // 2 calls to next() inside the loop == bad!
      Object two = i.next();
     }
    }
   }
   ]]>
       </example>
       </rule>

    <rule name="StringConcatenation"
           message="Consider replacing String concatenation inside loops with a StringBuffer"
           class="net.sourceforge.pmd.rules.StringConcatenationRule">
       <description>
       Consider replacing String concatenation inside loops with a StringBuffer
       </description>

       <example>
   <![CDATA[
   public class Bar {
    public String foo(Object[] someArray) {
     String list = "" ;
     for( int i = 0; i < someArray.length; i++ ){
      list = list + "," + someArray[i];
     }
     return list;
    }
   }
   ]]>
       </example>
       </rule>
       -->

</ruleset>