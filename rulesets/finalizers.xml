<?xml version="1.0"?>

<ruleset name="Finalizer Rules">
  <description>
These rules deal with different problems that can occur with finalizers.
  </description>

    <rule name="EmptyFinalizer"
          message="Avoid empty finalize methods"
          class="net.sourceforge.pmd.rules.XPathRule">
       <description>
       If the finalize() method is empty, then it does not need to exist.
       </description>
        <properties>
            <property name="xpath">
                <value>
<![CDATA[
   //MethodDeclaration[MethodDeclarator[@Image='finalize'][not(FormalParameters/*)]]
      /Block[count(*)=0]
]]>
                </value>
            </property>
        </properties>
        <priority>3</priority>
       <example>
<![CDATA[
   public class Foo {
       protected void finalize() {}
   }
]]>
       </example>
     </rule>

    <rule name="FinalizeOnlyCallsSuperFinalize"
          message="Finalize should do something besides just calling super.finalize()"
          class="net.sourceforge.pmd.rules.XPathRule">
       <description>
       If the finalize() is implemented, it should do something besides just calling
       super.finalize().
       </description>
        <properties>
            <property name="xpath">
                <value>
<![CDATA[
   //MethodDeclaration[MethodDeclarator[@Image="finalize"][not(FormalParameters/*)]]
       /Block[count(BlockStatement)=1]
         /BlockStatement[Statement/StatementExpression/PrimaryExpression
          /PrimaryPrefix[@Image="finalize"]
]]>
                </value>
            </property>
        </properties>
        <priority>3</priority>
       <example>
           <![CDATA[
   public class Foo {
       protected void finalize() {
         super.finalize();
       }
   }
           ]]>
       </example>
     </rule>

<rule name="FinalizeOverloaded"
      message="Finalize methods should not be overloaded"
      class="net.sourceforge.pmd.rules.XPathRule">
   <description>
   Methods named finalize() should not have parameters.  It is
   confusing and probably a bug to overload finalize().  It will
   not be called by the VM.
   </description>
    <properties>
        <property name="xpath">
            <value>
<![CDATA[
//MethodDeclaration
 /MethodDeclarator[@Image='finalize'][FormalParameters[count(*)>0]]
]]>
            </value>
        </property>
    </properties>
    <priority>3</priority>
   <example>
<![CDATA[
   public class Foo {
       // this is confusing and probably a bug
       protected void finalize(int a) {
       }
   }
]]>
   </example>
 </rule>

    <rule name="FinalizeDoesNotCallSuperFinalize"
          message="Last statement in finalize method should be a call to super.finalize()"
          class="net.sourceforge.pmd.rules.XPathRule">
       <description>
       If the finalize() is implemented, its last action should be to call super.finalize
       </description>
        <properties>
            <property name="xpath">
                <value>
<!-- in english: a method declaration of finalize(), with no arguments, containing
a block whose last statement is NOT a call to super.finalize -->
<![CDATA[
//MethodDeclaration[MethodDeclarator[@Image='finalize'][not(FormalParameters/*)]]
   /Block
      /BlockStatement[last()]
      [not(Statement/StatementExpression/PrimaryExpression/PrimaryPrefix[@Image='finalize'])]
]]>
                </value>
            </property>
        </properties>
        <priority>3</priority>
       <example>
<![CDATA[
public class Foo {
   protected void finalize() {
       something();
       // neglected to call super.finalize()
   }
}
]]>
       </example>
     </rule>

    <rule name="ExplicitCallToFinalize"
           message="Explicit call of finalize method"
           class="net.sourceforge.pmd.rules.XPathRule">
       <description>
       An explicit call was made to a finalize method.  Finalize methods
       are meant to be executed at most once (by the garbage collector).
       Calling it explicitly could result in the method being executed
       twice for that object (once by you, once by the garbage collector).
       </description>
         <properties>
             <property name="xpath">
                 <value>
<![CDATA[
//PrimaryExpression[PrimarySuffix
 /Arguments[count(*) = 0]]
  /PrimaryPrefix
   /Name[@Image = 'finalize' or ends-with(@Image, '.finalize')]
]]>
                 </value>
             </property>
         </properties>
         <priority>3</priority>
       <example>
   <![CDATA[
public class Foo {
 public void close()  {
    finalize();       // this is bad
    foo.finalize();   // this is also bad
    this.finalize();  // this is bad but currently not flagged
    super.finalize(); // this is OK
    foo.finalize(3);  // this is arguably OK because the method is overloaded
 }
}
   ]]>
       </example>
     </rule>

    <rule name="FinalizeShouldBeProtected"
          message="If you override finalize(), make it protected"
          class="net.sourceforge.pmd.rules.XPathRule">
      <description>
      If you override finalize(), make it protected.  Otherwise, subclasses
          may not called your implementation of finalize.
      </description>
        <properties>
            <property name="xpath">
                <value>
                    <![CDATA[
//MethodDeclaration[@Protected="false"]
  /MethodDeclarator[@Image="finalize"]
  [not(FormalParameters/*)]
                    ]]>
                </value>
            </property>
        </properties>
        <priority>3</priority>
      <example>
  <![CDATA[
public class Foo {
 public void finalize() {
  // do something
 }
}
  ]]>
      </example>
    </rule>


</ruleset>



