<?xml version="1.0"?>

<ruleset name="Strict Exception Rules">
  <description>
The Strict Exception ruleset contains a collection of strict rules concerning exceptions.
  </description>

   <rule name="AvoidCatchingThrowable"
         message="A catch statement should never catch throwable since it includes errors"
          class="net.sourceforge.pmd.rules.strictexception.AvoidCatchingThrowable">
      <description>
This is dangerous because if a java.lang.Error, for example OutOfMemmoryError,
occurs then it will be caught. The container should handle java.lang.Error.
If application code will catch them, try to log them (which will probably fail)
and continue silently the situation will not be desirable.
      </description>
      <priority>3</priority>
      <example>
                <![CDATA[
SimpleDateFormat sdf = null;
try {
    sdf = new SimpleDateFormat("yyyy-MM-dd");
} catch (Throwable th) {  //Should not catch throwable
    th.printStackTrace();
}
                ]]>
      </example>
    </rule>

   <rule name="SignatureDeclareThrowsException"
         message="A signature (constructor or method) shouldn't have Exception in throws declaration"
          class="net.sourceforge.pmd.rules.strictexception.ExceptionSignatureDeclaration">
      <description>
It is unclear which exceptions that can be thrown from the methods.
It might be difficult to document and understand the vague interfaces.
Use either a class derived from RuntimeException or a checked exception.
      </description>
      <priority>3</priority>
      <example>
                <![CDATA[
public void methodThrowingException() throws Exception {
}
                ]]>
      </example>
    </rule>

        <rule name="ExceptionTypeChecking"
         message="The catch clause shouldn't check the exception type - catch several exceptions instead"
          class="net.sourceforge.pmd.rules.strictexception.ExceptionTypeChecking">
      <description>
At some places Exception is caught and then a check with instanceof is performed.
This result in messy code. It's considered better to catch all the specific
exceptions instead.
      </description>
      <priority>3</priority>
      <example>
                <![CDATA[
SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
try {
    returnString = sdf.format(value);
} catch (Exception ex) {
    /* BAD STUFF !!!*/
    if (ex instanceof NumberFormatException) {
        System.out.println("NumberFormat exception!!!");
    }
    if (ex instanceof IllegalArgumentException) {
        System.out.println("illegal argument...!!!");
    }
}
                ]]>
      </example>
    </rule>


    <rule name="ExceptionAsFlowControlRule"
          message="Avoid using exceptions as flow control"
          class="net.sourceforge.pmd.rules.design.ExceptionAsFlowControlRule">
      <description>
          Using Exceptions as flow control leads to GOTOish code.
      </description>
        <priority>3</priority>
      <example>
  <![CDATA[
  public class Foo {
   void bar() {
    try {
     try {
     } catch (Exception e) {
      throw new WrapperException(e);
      // this is essentially a GOTO to the WrapperException catch block
     }
    } catch (WrapperException e) {
     // do some more stuff
    }
   }
  }
  ]]>
      </example>
    </rule>


<rule name="AvoidCatchingNPERule"
    message="Avoid catching NullPointerException; consider removing the cause of the NPE."
    class="net.sourceforge.pmd.rules.XPathRule">
    <description>
      Code should never throw NPE under normal circumstances.  A catch block may hide the original error, causing other more subtle errors in its wake.
    </description>
    <example>  <![CDATA[
try {
  ...
} catch (NullPointerException npe) {
  ...
}
]]>
         </example>
    <priority> 3 </priority>
    <properties>
      <property name="xpath">
        <value>
            <![CDATA[
//TryStatement/FormalParameter/Type
 /Name[@Image='NullPointerException']
 ]]>
        </value>
      </property>
    </properties>
  </rule>

  <rule name="AvoidThrowingCertainExceptionTypesRule"
      message="Avoid throwing certain exception types."
      class="net.sourceforge.pmd.rules.XPathRule">
    <description>
 1) Avoid throwing certain exception types.  Rather than throw a raw RuntimeException, Throwable,
 Exception, or Error, use a subclassed exception or error instead.
 2) Avoid throwing a NullPointerException - it's confusing because most people will assume that the
 VM threw NPE.  Consider using InvalidArgumentException("Null parameter") which will be clearly seen as
a programmer initiated exception..  Use IllegalArgumentException or IllegalStateException instead.
    </description>
 <example>
      <![CDATA[
throw new Exception();
]]>
    </example>
    <priority> 1 </priority>
    <properties>
      <property name="xpath">
        <value>
            <![CDATA[
//AllocationExpression
 /Name[
 @Image='Throwable' |
 @Image='Exception' |
 @Image='Error' |
 @Image='RuntimeException' |
 @Image='NullPointerException']
 ]]>
        </value>
      </property>
    </properties>
  </rule>
    
</ruleset>